# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X-Jho497RQtL6ejVHXpbS2DO5s-TZYkc
"""

# üìÑ app.py ‚Äî CityScope AI Chatbot

import streamlit as st
import pandas as pd
import joblib
import random

# === Page Setup ===
st.set_page_config(page_title="CityScope AI", layout="centered")
st.title("üèôÔ∏è CityScope AI Chatbot")

# === Load model and data ===
try:
    model = joblib.load("model.pkl")
    vectorizer = joblib.load("vectorizer.pkl")
    data = pd.read_excel("cityscopedata.xlsx")
except Exception as e:
    st.error("‚ùå Failed to load model or data. Please check file paths or re-upload.")
    st.stop()

# === Prepare questions and answers ===
questions = data['Question'].astype(str).tolist()
answers = data['Answer'].astype(str).tolist()

# === Fixed English Question Tips ===
english_tips = [
    "What is the population of Namakkal district?",
    "How many villages are there in Tirunelveli?",
    "Tell me about healthcare facilities in Madurai.",
    "What are the key educational institutions in Salem?",
    "Is Coimbatore more urban or rural?",
    "How many towns are in Kanyakumari?",
    "What industries are famous in Thoothukudi?"
]
random.shuffle(english_tips)

# === Question Tips UI ===
with st.expander("üí° Question Tips (Click to expand)", expanded=True):
    st.markdown("Try asking:")
    for tip in english_tips:
        st.markdown(f"- {tip}")
    st.button("üîÅ Refresh Tips", on_click=st.rerun)

# === Initialize session state for history ===
if "history" not in st.session_state:
    st.session_state.history = []

# === Input UI ===
user_query = st.text_input("‚úçÔ∏è Ask something about Tamil Nadu's districts:")

# === Clear All Button ===
if st.button("üßπ Clear All"):
    st.session_state.history = []
    st.experimental_rerun()

# === Prediction Logic ===
if user_query:
    try:
        query_vec = vectorizer.transform([user_query])
        dist, index = model.kneighbors(query_vec, n_neighbors=1)
        matched_index = index[0][0]
        answer = answers[matched_index]
        st.session_state.history.append((user_query, answer))
    except Exception as e:
        st.error("‚ö†Ô∏è Could not process the query. Please check the model/vectorizer.")
        st.stop()

# === Display History ===
if st.session_state.history:
    st.markdown("### üïò Conversation History")
    for i, (q, a) in enumerate(reversed(st.session_state.history), 1):
        st.markdown(f"**Q{i}:** {q}")
        st.markdown(f"‚úÖ **A{i}:** {a}")
        st.markdown("---")
